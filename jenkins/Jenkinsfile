// https://github.com/jenkinsci/hashicorp-vault-plugin
// https://www.jenkins.io/doc/book/pipeline/jenkinsfile/

import hudson.model.Job
import jenkins.scm.api.mixin.ChangeRequestSCMHead
import jenkins.scm.api.mixin.TagSCMHead
import org.jenkinsci.plugins.workflow.multibranch.BranchJobProperty

node {
  properties([disableConcurrentBuilds()])

  // This does not work for me? 
  // environment {
  //   PATH = "${env.PATH}:${env.WORKSPACE}/bin"
  // }

  stage('Checkout Repository') {
    git(
      url: "https://github.com/star3am/terraform-hashicorp-hashiqube.git",
      branch: "master",
      changelog: true,
      poll: true
    )
  }

  stage('Echo Variables') {
    echo "JOB_NAME: ${env.JOB_NAME}"
    echo "BUILD_ID: ${env.BUILD_ID}"
    echo "BUILD_NUMBER: ${env.BUILD_NUMBER}"
    echo "BRANCH_NAME: ${env.BRANCH_NAME}"
    echo "PULL_REQUEST: ${env.CHANGE_ID}"
    echo "BUILD_NUMBER: ${env.BUILD_NUMBER}"
    echo "BUILD_URL: ${env.BUILD_URL}"
    echo "NODE_NAME: ${env.NODE_NAME}"
    echo "BUILD_TAG: ${env.BUILD_TAG}"
    echo "JENKINS_URL: ${env.JENKINS_URL}"
    echo "EXECUTOR_NUMBER: ${env.EXECUTOR_NUMBER}"
    echo "WORKSPACE: ${env.WORKSPACE}"
    echo "GIT_COMMIT: ${env.GIT_COMMIT}"
    echo "GIT_URL: ${env.GIT_URL}"
    echo "GIT_BRANCH: ${env.GIT_BRANCH}"
    LAST_COMMIT_MSG = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%s'")
    echo "LAST_COMMIT_MSG: ${LAST_COMMIT_MSG}"
    env.ARCH = sh(returnStdout: true, script: "lscpu | grep 'Architecture' | tr -s ' ' | cut -d ' ' -f 2 | tr -d '[:space:]'")
    echo "ARCH: ${env.ARCH}"
    env.PATH = "${env.PATH}:${env.WORKSPACE}/bin"
    echo sh(script: 'env|sort', returnStdout: true)
    sh('echo $(hostname)')
  }

  stage('Create Terraform Backend Config') {
    sh """
      cat <<EOF | tee backend.hcl
terraform {
  cloud {
    organization = "my-org"
    workspaces {
      tags = ["networking"]
    }
  }
}
EOF
    """
  }

  stage('Install Dependencies') {
    sh """
      pwd
      ls -la 
      mkdir -p bin
      ls -la bin/
    """
    if (env.ARCH == "x86_64*") {
      script {
        env.arch = "amd64"
        echo "${env.arch}"
      }
    }
    if (env.ARCH == 'aarch64') {
      script {
        env.arch = "arm64"
        echo "${env.arch}"
      }
    }
    sh """
      curl "https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_${env.arch}.zip" --output bin/terraform.zip
      (cd bin && unzip -o terraform.zip)
      pwd
      ls -la 
      mkdir -p bin
      ls -la bin/
      bin/terraform -v
      echo "${env.arch}"
      echo "${env.PATH}"
    """
  }

  stage('Run run.sh') {
    sh('./run-without-make.sh')
  }

  // stage('Get ENV vars from Vault') {
  //   // define the secrets and the env variables
  //   // engine version can be defined on secret, job, folder or global.
  //   // the default is engine version 2 unless otherwise specified globally.
  //   def secrets = [
  //     [path: 'kv2/secret/another_test', engineVersion: 2, secretValues: [
  //     [vaultKey: 'another_test']]],
  //     [path: 'kv1/secret/testing/value_one', engineVersion: 1, secretValues: [
  //     [vaultKey: 'value_one']]],
  //     [path: 'kv1/secret/testing/value_two', engineVersion: 1, secretValues: [
  //     [envVar: 'my_var', vaultKey: 'value_two']]]
  //   ]

  //   // optional configuration, if you do not provide this the next higher configuration
  //   // (e.g. folder or global) will be used
  //   def configuration = [vaultUrl: 'http://10.9.99.10:8200',
  //     vaultCredentialId: 'vault-initial-root-token',
  //     engineVersion: 1]

  //   // inside this block your credentials will be available as env variables
  //   withVault([configuration: configuration, vaultSecrets: secrets]) {
  //     sh 'echo $value_one'
  //     sh 'echo $my_var'
  //     sh 'echo $another_test'
  //   }
  // }

  // stage('Echo some ENV vars') {
  //   withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: 'vault-initial-root-token', vaultAddr: 'http://10.9.99.10:8200']]) {
  //     // values will be masked
  //     sh 'echo TOKEN=$VAULT_TOKEN'
  //     sh 'echo ADDR=$VAULT_ADDR'
  //   }
  //   echo sh(script: 'env|sort', returnStdout: true)
  // }
}
